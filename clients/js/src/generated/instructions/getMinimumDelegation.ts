/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';

export const GET_MINIMUM_DELEGATION_DISCRIMINATOR = new Uint8Array([
  197, 65, 7, 73, 151, 105, 133, 105,
]);

export function getGetMinimumDelegationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_MINIMUM_DELEGATION_DISCRIMINATOR
  );
}

export type GetMinimumDelegationInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type GetMinimumDelegationInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GetMinimumDelegationInstructionDataArgs = {};

export function getGetMinimumDelegationInstructionDataEncoder(): Encoder<GetMinimumDelegationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: GET_MINIMUM_DELEGATION_DISCRIMINATOR,
    })
  );
}

export function getGetMinimumDelegationInstructionDataDecoder(): Decoder<GetMinimumDelegationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGetMinimumDelegationInstructionDataCodec(): Codec<
  GetMinimumDelegationInstructionDataArgs,
  GetMinimumDelegationInstructionData
> {
  return combineCodec(
    getGetMinimumDelegationInstructionDataEncoder(),
    getGetMinimumDelegationInstructionDataDecoder()
  );
}

export type GetMinimumDelegationInput = {};

export function getGetMinimumDelegationInstruction<
  TProgramAddress extends Address = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): GetMinimumDelegationInstruction<TProgramAddress> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKE_PROGRAM_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getGetMinimumDelegationInstructionDataEncoder().encode({}),
  } as GetMinimumDelegationInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedGetMinimumDelegationInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: GetMinimumDelegationInstructionData;
};

export function parseGetMinimumDelegationInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedGetMinimumDelegationInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getGetMinimumDelegationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
