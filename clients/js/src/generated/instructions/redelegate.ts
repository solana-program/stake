/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REDELEGATE_DISCRIMINATOR = new Uint8Array([
  212, 82, 51, 160, 228, 80, 116, 35,
]);

export function getRedelegateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REDELEGATE_DISCRIMINATOR);
}

export type RedelegateInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountUninitializedStake extends string | IAccountMeta<string> = string,
  TAccountVote extends string | IAccountMeta<string> = string,
  TAccountStakeConfig extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountUninitializedStake extends string
        ? WritableAccount<TAccountUninitializedStake>
        : TAccountUninitializedStake,
      TAccountVote extends string
        ? ReadonlyAccount<TAccountVote>
        : TAccountVote,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type RedelegateInstructionData = { discriminator: ReadonlyUint8Array };

export type RedelegateInstructionDataArgs = {};

export function getRedelegateInstructionDataEncoder(): Encoder<RedelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REDELEGATE_DISCRIMINATOR })
  );
}

export function getRedelegateInstructionDataDecoder(): Decoder<RedelegateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRedelegateInstructionDataCodec(): Codec<
  RedelegateInstructionDataArgs,
  RedelegateInstructionData
> {
  return combineCodec(
    getRedelegateInstructionDataEncoder(),
    getRedelegateInstructionDataDecoder()
  );
}

export type RedelegateInput<
  TAccountStake extends string = string,
  TAccountUninitializedStake extends string = string,
  TAccountVote extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** The delegated stake account to be redelegated. The account must be fully activated and carry a balance greater than or equal to the minimum delegation amount plus rent exempt minimum */
  stake: Address<TAccountStake>;
  /** Uninitialized stake account that will hold the redelegated stake */
  uninitializedStake: Address<TAccountUninitializedStake>;
  /** Vote account to which stake will be redelegated */
  vote: Address<TAccountVote>;
  /** Stake config native program */
  stakeConfig: Address<TAccountStakeConfig>;
  /** stake's stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
};

export function getRedelegateInstruction<
  TAccountStake extends string,
  TAccountUninitializedStake extends string,
  TAccountVote extends string,
  TAccountStakeConfig extends string,
  TAccountStakeAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: RedelegateInput<
    TAccountStake,
    TAccountUninitializedStake,
    TAccountVote,
    TAccountStakeConfig,
    TAccountStakeAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): RedelegateInstruction<
  TProgramAddress,
  TAccountStake,
  TAccountUninitializedStake,
  TAccountVote,
  TAccountStakeConfig,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stake: { value: input.stake ?? null, isWritable: true },
    uninitializedStake: {
      value: input.uninitializedStake ?? null,
      isWritable: true,
    },
    vote: { value: input.vote ?? null, isWritable: false },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.uninitializedStake),
      getAccountMeta(accounts.vote),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getRedelegateInstructionDataEncoder().encode({}),
  } as RedelegateInstruction<
    TProgramAddress,
    TAccountStake,
    TAccountUninitializedStake,
    TAccountVote,
    TAccountStakeConfig,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedRedelegateInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The delegated stake account to be redelegated. The account must be fully activated and carry a balance greater than or equal to the minimum delegation amount plus rent exempt minimum */
    stake: TAccountMetas[0];
    /** Uninitialized stake account that will hold the redelegated stake */
    uninitializedStake: TAccountMetas[1];
    /** Vote account to which stake will be redelegated */
    vote: TAccountMetas[2];
    /** Stake config native program */
    stakeConfig: TAccountMetas[3];
    /** stake's stake authority */
    stakeAuthority: TAccountMetas[4];
  };
  data: RedelegateInstructionData;
};

export function parseRedelegateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRedelegateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stake: getNextAccount(),
      uninitializedStake: getNextAccount(),
      vote: getNextAccount(),
      stakeConfig: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getRedelegateInstructionDataDecoder().decode(instruction.data),
  };
}
