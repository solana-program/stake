/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DELEGATE_STAKE_DISCRIMINATOR = 2;

export function getDelegateStakeDiscriminatorBytes() {
  return getU32Encoder().encode(DELEGATE_STAKE_DISCRIMINATOR);
}

export type DelegateStakeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountStake extends string | AccountMeta<string> = string,
  TAccountVote extends string | AccountMeta<string> = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TAccountStakeHistory extends string | AccountMeta<string> = string,
  TAccountUnused extends string | AccountMeta<string> = string,
  TAccountStakeAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountVote extends string
        ? ReadonlyAccount<TAccountVote>
        : TAccountVote,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountUnused extends string
        ? ReadonlyAccount<TAccountUnused>
        : TAccountUnused,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            AccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type DelegateStakeInstructionData = { discriminator: number };

export type DelegateStakeInstructionDataArgs = {};

export function getDelegateStakeInstructionDataEncoder(): FixedSizeEncoder<DelegateStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU32Encoder()]]),
    (value) => ({ ...value, discriminator: DELEGATE_STAKE_DISCRIMINATOR })
  );
}

export function getDelegateStakeInstructionDataDecoder(): FixedSizeDecoder<DelegateStakeInstructionData> {
  return getStructDecoder([['discriminator', getU32Decoder()]]);
}

export function getDelegateStakeInstructionDataCodec(): FixedSizeCodec<
  DelegateStakeInstructionDataArgs,
  DelegateStakeInstructionData
> {
  return combineCodec(
    getDelegateStakeInstructionDataEncoder(),
    getDelegateStakeInstructionDataDecoder()
  );
}

export type DelegateStakeInput<
  TAccountStake extends string = string,
  TAccountVote extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountUnused extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** Initialized stake account to be delegated */
  stake: Address<TAccountStake>;
  /** Vote account to which this stake will be delegated */
  vote: Address<TAccountVote>;
  /** Clock sysvar */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Stake history sysvar */
  stakeHistory: Address<TAccountStakeHistory>;
  /** Unused account, formerly the stake config */
  unused: Address<TAccountUnused>;
  /** Stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
};

export function getDelegateStakeInstruction<
  TAccountStake extends string,
  TAccountVote extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistory extends string,
  TAccountUnused extends string,
  TAccountStakeAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,
>(
  input: DelegateStakeInput<
    TAccountStake,
    TAccountVote,
    TAccountClockSysvar,
    TAccountStakeHistory,
    TAccountUnused,
    TAccountStakeAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): DelegateStakeInstruction<
  TProgramAddress,
  TAccountStake,
  TAccountVote,
  TAccountClockSysvar,
  TAccountStakeHistory,
  TAccountUnused,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stake: { value: input.stake ?? null, isWritable: true },
    vote: { value: input.vote ?? null, isWritable: false },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    unused: { value: input.unused ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'omitted');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.vote),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.unused),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getDelegateStakeInstructionDataEncoder().encode({}),
  } as DelegateStakeInstruction<
    TProgramAddress,
    TAccountStake,
    TAccountVote,
    TAccountClockSysvar,
    TAccountStakeHistory,
    TAccountUnused,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedDelegateStakeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Initialized stake account to be delegated */
    stake: TAccountMetas[0];
    /** Vote account to which this stake will be delegated */
    vote: TAccountMetas[1];
    /** Clock sysvar */
    clockSysvar: TAccountMetas[2];
    /** Stake history sysvar */
    stakeHistory: TAccountMetas[3];
    /** Unused account, formerly the stake config */
    unused: TAccountMetas[4];
    /** Stake authority */
    stakeAuthority: TAccountMetas[5];
  };
  data: DelegateStakeInstructionData;
};

export function parseDelegateStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDelegateStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stake: getNextAccount(),
      vote: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistory: getNextAccount(),
      unused: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getDelegateStakeInstructionDataDecoder().decode(instruction.data),
  };
}
