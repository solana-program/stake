/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SPLIT_DISCRIMINATOR = 3;

export function getSplitDiscriminatorBytes() {
  return getU32Encoder().encode(SPLIT_DISCRIMINATOR);
}

export type SplitInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountSplitStake extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountSplitStake extends string
        ? WritableAccount<TAccountSplitStake>
        : TAccountSplitStake,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SplitInstructionData = { discriminator: number; args: bigint };

export type SplitInstructionDataArgs = { args: number | bigint };

export function getSplitInstructionDataEncoder(): Encoder<SplitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU32Encoder()],
      ['args', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SPLIT_DISCRIMINATOR })
  );
}

export function getSplitInstructionDataDecoder(): Decoder<SplitInstructionData> {
  return getStructDecoder([
    ['discriminator', getU32Decoder()],
    ['args', getU64Decoder()],
  ]);
}

export function getSplitInstructionDataCodec(): Codec<
  SplitInstructionDataArgs,
  SplitInstructionData
> {
  return combineCodec(
    getSplitInstructionDataEncoder(),
    getSplitInstructionDataDecoder()
  );
}

export type SplitInput<
  TAccountStake extends string = string,
  TAccountSplitStake extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** Stake account to be split */
  stake: Address<TAccountStake>;
  /** Uninitialized stake account */
  splitStake: Address<TAccountSplitStake>;
  /** Stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  args: SplitInstructionDataArgs['args'];
};

export function getSplitInstruction<
  TAccountStake extends string,
  TAccountSplitStake extends string,
  TAccountStakeAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,
>(
  input: SplitInput<TAccountStake, TAccountSplitStake, TAccountStakeAuthority>,
  config?: { programAddress?: TProgramAddress }
): SplitInstruction<
  TProgramAddress,
  TAccountStake,
  TAccountSplitStake,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stake: { value: input.stake ?? null, isWritable: true },
    splitStake: { value: input.splitStake ?? null, isWritable: true },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'omitted');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.splitStake),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getSplitInstructionDataEncoder().encode(
      args as SplitInstructionDataArgs
    ),
  } as SplitInstruction<
    TProgramAddress,
    TAccountStake,
    TAccountSplitStake,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedSplitInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake account to be split */
    stake: TAccountMetas[0];
    /** Uninitialized stake account */
    splitStake: TAccountMetas[1];
    /** Stake authority */
    stakeAuthority: TAccountMetas[2];
  };
  data: SplitInstructionData;
};

export function parseSplitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSplitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stake: getNextAccount(),
      splitStake: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getSplitInstructionDataDecoder().decode(instruction.data),
  };
}
