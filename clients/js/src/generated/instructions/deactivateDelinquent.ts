/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DEACTIVATE_DELINQUENT_DISCRIMINATOR = 14;

export function getDeactivateDelinquentDiscriminatorBytes() {
  return getU32Encoder().encode(DEACTIVATE_DELINQUENT_DISCRIMINATOR);
}

export type DeactivateDelinquentInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountDelinquentVote extends string | IAccountMeta<string> = string,
  TAccountReferenceVote extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountDelinquentVote extends string
        ? ReadonlyAccount<TAccountDelinquentVote>
        : TAccountDelinquentVote,
      TAccountReferenceVote extends string
        ? ReadonlyAccount<TAccountReferenceVote>
        : TAccountReferenceVote,
      ...TRemainingAccounts,
    ]
  >;

export type DeactivateDelinquentInstructionData = { discriminator: number };

export type DeactivateDelinquentInstructionDataArgs = {};

export function getDeactivateDelinquentInstructionDataEncoder(): Encoder<DeactivateDelinquentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU32Encoder()]]),
    (value) => ({
      ...value,
      discriminator: DEACTIVATE_DELINQUENT_DISCRIMINATOR,
    })
  );
}

export function getDeactivateDelinquentInstructionDataDecoder(): Decoder<DeactivateDelinquentInstructionData> {
  return getStructDecoder([['discriminator', getU32Decoder()]]);
}

export function getDeactivateDelinquentInstructionDataCodec(): Codec<
  DeactivateDelinquentInstructionDataArgs,
  DeactivateDelinquentInstructionData
> {
  return combineCodec(
    getDeactivateDelinquentInstructionDataEncoder(),
    getDeactivateDelinquentInstructionDataDecoder()
  );
}

export type DeactivateDelinquentInput<
  TAccountStake extends string = string,
  TAccountDelinquentVote extends string = string,
  TAccountReferenceVote extends string = string,
> = {
  /** Delegated stake account */
  stake: Address<TAccountStake>;
  /** Delinquent vote account */
  delinquentVote: Address<TAccountDelinquentVote>;
  /** Reference vote account */
  referenceVote: Address<TAccountReferenceVote>;
};

export function getDeactivateDelinquentInstruction<
  TAccountStake extends string,
  TAccountDelinquentVote extends string,
  TAccountReferenceVote extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,
>(
  input: DeactivateDelinquentInput<
    TAccountStake,
    TAccountDelinquentVote,
    TAccountReferenceVote
  >,
  config?: { programAddress?: TProgramAddress }
): DeactivateDelinquentInstruction<
  TProgramAddress,
  TAccountStake,
  TAccountDelinquentVote,
  TAccountReferenceVote
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stake: { value: input.stake ?? null, isWritable: true },
    delinquentVote: { value: input.delinquentVote ?? null, isWritable: false },
    referenceVote: { value: input.referenceVote ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'omitted');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.delinquentVote),
      getAccountMeta(accounts.referenceVote),
    ],
    programAddress,
    data: getDeactivateDelinquentInstructionDataEncoder().encode({}),
  } as DeactivateDelinquentInstruction<
    TProgramAddress,
    TAccountStake,
    TAccountDelinquentVote,
    TAccountReferenceVote
  >;

  return instruction;
}

export type ParsedDeactivateDelinquentInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Delegated stake account */
    stake: TAccountMetas[0];
    /** Delinquent vote account */
    delinquentVote: TAccountMetas[1];
    /** Reference vote account */
    referenceVote: TAccountMetas[2];
  };
  data: DeactivateDelinquentInstructionData;
};

export function parseDeactivateDelinquentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDeactivateDelinquentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stake: getNextAccount(),
      delinquentVote: getNextAccount(),
      referenceVote: getNextAccount(),
    },
    data: getDeactivateDelinquentInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
