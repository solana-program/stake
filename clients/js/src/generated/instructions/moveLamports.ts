/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MOVE_LAMPORTS_DISCRIMINATOR = 17;

export function getMoveLamportsDiscriminatorBytes() {
  return getU32Encoder().encode(MOVE_LAMPORTS_DISCRIMINATOR);
}

export type MoveLamportsInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountSourceStake extends string | AccountMeta<string> = string,
  TAccountDestinationStake extends string | AccountMeta<string> = string,
  TAccountStakeAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSourceStake extends string
        ? WritableAccount<TAccountSourceStake>
        : TAccountSourceStake,
      TAccountDestinationStake extends string
        ? WritableAccount<TAccountDestinationStake>
        : TAccountDestinationStake,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            AccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type MoveLamportsInstructionData = {
  discriminator: number;
  args: bigint;
};

export type MoveLamportsInstructionDataArgs = { args: number | bigint };

export function getMoveLamportsInstructionDataEncoder(): FixedSizeEncoder<MoveLamportsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU32Encoder()],
      ['args', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MOVE_LAMPORTS_DISCRIMINATOR })
  );
}

export function getMoveLamportsInstructionDataDecoder(): FixedSizeDecoder<MoveLamportsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU32Decoder()],
    ['args', getU64Decoder()],
  ]);
}

export function getMoveLamportsInstructionDataCodec(): FixedSizeCodec<
  MoveLamportsInstructionDataArgs,
  MoveLamportsInstructionData
> {
  return combineCodec(
    getMoveLamportsInstructionDataEncoder(),
    getMoveLamportsInstructionDataDecoder()
  );
}

export type MoveLamportsInput<
  TAccountSourceStake extends string = string,
  TAccountDestinationStake extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** Active or inactive source stake account */
  sourceStake: Address<TAccountSourceStake>;
  /** Mergeable destination stake account */
  destinationStake: Address<TAccountDestinationStake>;
  /** Stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  args: MoveLamportsInstructionDataArgs['args'];
};

export function getMoveLamportsInstruction<
  TAccountSourceStake extends string,
  TAccountDestinationStake extends string,
  TAccountStakeAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,
>(
  input: MoveLamportsInput<
    TAccountSourceStake,
    TAccountDestinationStake,
    TAccountStakeAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): MoveLamportsInstruction<
  TProgramAddress,
  TAccountSourceStake,
  TAccountDestinationStake,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sourceStake: { value: input.sourceStake ?? null, isWritable: true },
    destinationStake: {
      value: input.destinationStake ?? null,
      isWritable: true,
    },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'omitted');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.sourceStake),
      getAccountMeta(accounts.destinationStake),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getMoveLamportsInstructionDataEncoder().encode(
      args as MoveLamportsInstructionDataArgs
    ),
  } as MoveLamportsInstruction<
    TProgramAddress,
    TAccountSourceStake,
    TAccountDestinationStake,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedMoveLamportsInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Active or inactive source stake account */
    sourceStake: TAccountMetas[0];
    /** Mergeable destination stake account */
    destinationStake: TAccountMetas[1];
    /** Stake authority */
    stakeAuthority: TAccountMetas[2];
  };
  data: MoveLamportsInstructionData;
};

export function parseMoveLamportsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMoveLamportsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sourceStake: getNextAccount(),
      destinationStake: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getMoveLamportsInstructionDataDecoder().decode(instruction.data),
  };
}
