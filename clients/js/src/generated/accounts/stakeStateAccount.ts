/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  getStakeStateV2Decoder,
  getStakeStateV2Encoder,
  type StakeStateV2,
  type StakeStateV2Args,
} from '../types';

export type StakeStateAccount = { state: StakeStateV2 };

export type StakeStateAccountArgs = { state: StakeStateV2Args };

export function getStakeStateAccountEncoder(): Encoder<StakeStateAccountArgs> {
  return getStructEncoder([['state', getStakeStateV2Encoder()]]);
}

export function getStakeStateAccountDecoder(): Decoder<StakeStateAccount> {
  return getStructDecoder([['state', getStakeStateV2Decoder()]]);
}

export function getStakeStateAccountCodec(): Codec<
  StakeStateAccountArgs,
  StakeStateAccount
> {
  return combineCodec(
    getStakeStateAccountEncoder(),
    getStakeStateAccountDecoder()
  );
}

export function decodeStakeStateAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakeStateAccount, TAddress>;
export function decodeStakeStateAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakeStateAccount, TAddress>;
export function decodeStakeStateAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<StakeStateAccount, TAddress>
  | MaybeAccount<StakeStateAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakeStateAccountDecoder()
  );
}

export async function fetchStakeStateAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakeStateAccount, TAddress>> {
  const maybeAccount = await fetchMaybeStakeStateAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakeStateAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakeStateAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakeStateAccount(maybeAccount);
}

export async function fetchAllStakeStateAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakeStateAccount>[]> {
  const maybeAccounts = await fetchAllMaybeStakeStateAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakeStateAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakeStateAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeStakeStateAccount(maybeAccount)
  );
}
