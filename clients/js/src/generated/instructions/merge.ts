/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MERGE_DISCRIMINATOR = 7;

export function getMergeDiscriminatorBytes() {
  return getU32Encoder().encode(MERGE_DISCRIMINATOR);
}

export type MergeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountDestinationStake extends string | IAccountMeta<string> = string,
  TAccountSourceStake extends string | IAccountMeta<string> = string,
  TAccountClockSysvar extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountDestinationStake extends string
        ? WritableAccount<TAccountDestinationStake>
        : TAccountDestinationStake,
      TAccountSourceStake extends string
        ? WritableAccount<TAccountSourceStake>
        : TAccountSourceStake,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type MergeInstructionData = { discriminator: number };

export type MergeInstructionDataArgs = {};

export function getMergeInstructionDataEncoder(): Encoder<MergeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU32Encoder()]]),
    (value) => ({ ...value, discriminator: MERGE_DISCRIMINATOR })
  );
}

export function getMergeInstructionDataDecoder(): Decoder<MergeInstructionData> {
  return getStructDecoder([['discriminator', getU32Decoder()]]);
}

export function getMergeInstructionDataCodec(): Codec<
  MergeInstructionDataArgs,
  MergeInstructionData
> {
  return combineCodec(
    getMergeInstructionDataEncoder(),
    getMergeInstructionDataDecoder()
  );
}

export type MergeInput<
  TAccountDestinationStake extends string = string,
  TAccountSourceStake extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** Destination stake account */
  destinationStake: Address<TAccountDestinationStake>;
  /** Source stake account */
  sourceStake: Address<TAccountSourceStake>;
  /** Clock sysvar */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Stake history sysvar */
  stakeHistory: Address<TAccountStakeHistory>;
  /** Stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
};

export function getMergeInstruction<
  TAccountDestinationStake extends string,
  TAccountSourceStake extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistory extends string,
  TAccountStakeAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,
>(
  input: MergeInput<
    TAccountDestinationStake,
    TAccountSourceStake,
    TAccountClockSysvar,
    TAccountStakeHistory,
    TAccountStakeAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): MergeInstruction<
  TProgramAddress,
  TAccountDestinationStake,
  TAccountSourceStake,
  TAccountClockSysvar,
  TAccountStakeHistory,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    destinationStake: {
      value: input.destinationStake ?? null,
      isWritable: true,
    },
    sourceStake: { value: input.sourceStake ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'omitted');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.destinationStake),
      getAccountMeta(accounts.sourceStake),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getMergeInstructionDataEncoder().encode({}),
  } as MergeInstruction<
    TProgramAddress,
    TAccountDestinationStake,
    TAccountSourceStake,
    TAccountClockSysvar,
    TAccountStakeHistory,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedMergeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Destination stake account */
    destinationStake: TAccountMetas[0];
    /** Source stake account */
    sourceStake: TAccountMetas[1];
    /** Clock sysvar */
    clockSysvar: TAccountMetas[2];
    /** Stake history sysvar */
    stakeHistory: TAccountMetas[3];
    /** Stake authority */
    stakeAuthority: TAccountMetas[4];
  };
  data: MergeInstructionData;
};

export function parseMergeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMergeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      destinationStake: getNextAccount(),
      sourceStake: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getMergeInstructionDataDecoder().decode(instruction.data),
  };
}
