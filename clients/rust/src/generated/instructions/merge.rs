//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Merge {
    /// The destination stake account to merge into
    pub to: solana_program::pubkey::Pubkey,
    /// The stake account to merge from. Must have exact same lockup and authority as to. This account will be drained.
    pub from: solana_program::pubkey::Pubkey,
    /// Clock sysvar
    pub clock: solana_program::pubkey::Pubkey,
    /// Stake history sysvar
    pub stake_history: solana_program::pubkey::Pubkey,
    /// Both from and to's stake authority
    pub stake_authority: solana_program::pubkey::Pubkey,
}

impl Merge {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.to, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.from, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_history,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = MergeInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::STAKE_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MergeInstructionData {
    discriminator: [u8; 8],
}

impl MergeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [148, 141, 236, 47, 174, 126, 69, 111],
        }
    }
}

impl Default for MergeInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `Merge`.
///
/// ### Accounts:
///
///   0. `[writable]` to
///   1. `[writable]` from
///   2. `[]` clock
///   3. `[]` stake_history
///   4. `[signer]` stake_authority
#[derive(Clone, Debug, Default)]
pub struct MergeBuilder {
    to: Option<solana_program::pubkey::Pubkey>,
    from: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    stake_history: Option<solana_program::pubkey::Pubkey>,
    stake_authority: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MergeBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The destination stake account to merge into
    #[inline(always)]
    pub fn to(&mut self, to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.to = Some(to);
        self
    }
    /// The stake account to merge from. Must have exact same lockup and authority as to. This account will be drained.
    #[inline(always)]
    pub fn from(&mut self, from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.from = Some(from);
        self
    }
    /// Clock sysvar
    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }
    /// Stake history sysvar
    #[inline(always)]
    pub fn stake_history(&mut self, stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_history = Some(stake_history);
        self
    }
    /// Both from and to's stake authority
    #[inline(always)]
    pub fn stake_authority(
        &mut self,
        stake_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_authority = Some(stake_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Merge {
            to: self.to.expect("to is not set"),
            from: self.from.expect("from is not set"),
            clock: self.clock.expect("clock is not set"),
            stake_history: self.stake_history.expect("stake_history is not set"),
            stake_authority: self.stake_authority.expect("stake_authority is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `merge` CPI accounts.
pub struct MergeCpiAccounts<'a, 'b> {
    /// The destination stake account to merge into
    pub to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The stake account to merge from. Must have exact same lockup and authority as to. This account will be drained.
    pub from: &'b solana_program::account_info::AccountInfo<'a>,
    /// Clock sysvar
    pub clock: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake history sysvar
    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    /// Both from and to's stake authority
    pub stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `merge` CPI instruction.
pub struct MergeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination stake account to merge into
    pub to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The stake account to merge from. Must have exact same lockup and authority as to. This account will be drained.
    pub from: &'b solana_program::account_info::AccountInfo<'a>,
    /// Clock sysvar
    pub clock: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake history sysvar
    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    /// Both from and to's stake authority
    pub stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MergeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MergeCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            to: accounts.to,
            from: accounts.from,
            clock: accounts.clock,
            stake_history: accounts.stake_history,
            stake_authority: accounts.stake_authority,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_history.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = MergeInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::STAKE_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.to.clone());
        account_infos.push(self.from.clone());
        account_infos.push(self.clock.clone());
        account_infos.push(self.stake_history.clone());
        account_infos.push(self.stake_authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Merge` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` to
///   1. `[writable]` from
///   2. `[]` clock
///   3. `[]` stake_history
///   4. `[signer]` stake_authority
#[derive(Clone, Debug)]
pub struct MergeCpiBuilder<'a, 'b> {
    instruction: Box<MergeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MergeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MergeCpiBuilderInstruction {
            __program: program,
            to: None,
            from: None,
            clock: None,
            stake_history: None,
            stake_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The destination stake account to merge into
    #[inline(always)]
    pub fn to(&mut self, to: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.to = Some(to);
        self
    }
    /// The stake account to merge from. Must have exact same lockup and authority as to. This account will be drained.
    #[inline(always)]
    pub fn from(&mut self, from: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.from = Some(from);
        self
    }
    /// Clock sysvar
    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }
    /// Stake history sysvar
    #[inline(always)]
    pub fn stake_history(
        &mut self,
        stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_history = Some(stake_history);
        self
    }
    /// Both from and to's stake authority
    #[inline(always)]
    pub fn stake_authority(
        &mut self,
        stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_authority = Some(stake_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MergeCpi {
            __program: self.instruction.__program,

            to: self.instruction.to.expect("to is not set"),

            from: self.instruction.from.expect("from is not set"),

            clock: self.instruction.clock.expect("clock is not set"),

            stake_history: self
                .instruction
                .stake_history
                .expect("stake_history is not set"),

            stake_authority: self
                .instruction
                .stake_authority
                .expect("stake_authority is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MergeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
