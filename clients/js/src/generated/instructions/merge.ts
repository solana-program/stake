/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MERGE_DISCRIMINATOR = new Uint8Array([
  148, 141, 236, 47, 174, 126, 69, 111,
]);

export function getMergeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MERGE_DISCRIMINATOR);
}

export type MergeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountTo extends string | IAccountMeta<string> = string,
  TAccountFrom extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTo extends string ? WritableAccount<TAccountTo> : TAccountTo,
      TAccountFrom extends string
        ? WritableAccount<TAccountFrom>
        : TAccountFrom,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type MergeInstructionData = { discriminator: ReadonlyUint8Array };

export type MergeInstructionDataArgs = {};

export function getMergeInstructionDataEncoder(): Encoder<MergeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MERGE_DISCRIMINATOR })
  );
}

export function getMergeInstructionDataDecoder(): Decoder<MergeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMergeInstructionDataCodec(): Codec<
  MergeInstructionDataArgs,
  MergeInstructionData
> {
  return combineCodec(
    getMergeInstructionDataEncoder(),
    getMergeInstructionDataDecoder()
  );
}

export type MergeInput<
  TAccountTo extends string = string,
  TAccountFrom extends string = string,
  TAccountClock extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** The destination stake account to merge into */
  to: Address<TAccountTo>;
  /** The stake account to merge from. Must have exact same lockup and authority as to. This account will be drained. */
  from: Address<TAccountFrom>;
  /** Clock sysvar */
  clock: Address<TAccountClock>;
  /** Stake history sysvar */
  stakeHistory: Address<TAccountStakeHistory>;
  /** Both from and to's stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
};

export function getMergeInstruction<
  TAccountTo extends string,
  TAccountFrom extends string,
  TAccountClock extends string,
  TAccountStakeHistory extends string,
  TAccountStakeAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MergeInput<
    TAccountTo,
    TAccountFrom,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): MergeInstruction<
  TProgramAddress,
  TAccountTo,
  TAccountFrom,
  TAccountClock,
  TAccountStakeHistory,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    to: { value: input.to ?? null, isWritable: true },
    from: { value: input.from ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.to),
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getMergeInstructionDataEncoder().encode({}),
  } as MergeInstruction<
    TProgramAddress,
    TAccountTo,
    TAccountFrom,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedMergeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The destination stake account to merge into */
    to: TAccountMetas[0];
    /** The stake account to merge from. Must have exact same lockup and authority as to. This account will be drained. */
    from: TAccountMetas[1];
    /** Clock sysvar */
    clock: TAccountMetas[2];
    /** Stake history sysvar */
    stakeHistory: TAccountMetas[3];
    /** Both from and to's stake authority */
    stakeAuthority: TAccountMetas[4];
  };
  data: MergeInstructionData;
};

export function parseMergeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMergeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      to: getNextAccount(),
      from: getNextAccount(),
      clock: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getMergeInstructionDataDecoder().decode(instruction.data),
  };
}
