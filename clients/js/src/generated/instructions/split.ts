/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SPLIT_DISCRIMINATOR = new Uint8Array([
  124, 189, 27, 43, 216, 40, 147, 66,
]);

export function getSplitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SPLIT_DISCRIMINATOR);
}

export type SplitInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountFrom extends string | IAccountMeta<string> = string,
  TAccountTo extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFrom extends string
        ? WritableAccount<TAccountFrom>
        : TAccountFrom,
      TAccountTo extends string ? WritableAccount<TAccountTo> : TAccountTo,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SplitInstructionData = {
  discriminator: ReadonlyUint8Array;
  lamports: bigint;
};

export type SplitInstructionDataArgs = { lamports: number | bigint };

export function getSplitInstructionDataEncoder(): Encoder<SplitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lamports', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SPLIT_DISCRIMINATOR })
  );
}

export function getSplitInstructionDataDecoder(): Decoder<SplitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lamports', getU64Decoder()],
  ]);
}

export function getSplitInstructionDataCodec(): Codec<
  SplitInstructionDataArgs,
  SplitInstructionData
> {
  return combineCodec(
    getSplitInstructionDataEncoder(),
    getSplitInstructionDataDecoder()
  );
}

export type SplitInput<
  TAccountFrom extends string = string,
  TAccountTo extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** The stake account to split. Must be in the Initialized or Stake state */
  from: Address<TAccountFrom>;
  /** The uninitialized stake account to split to. Must be rent-exempt starting from solana 1.17. */
  to: Address<TAccountTo>;
  /** from's stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  lamports: SplitInstructionDataArgs['lamports'];
};

export function getSplitInstruction<
  TAccountFrom extends string,
  TAccountTo extends string,
  TAccountStakeAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: SplitInput<TAccountFrom, TAccountTo, TAccountStakeAuthority>,
  config?: { programAddress?: TProgramAddress }
): SplitInstruction<
  TProgramAddress,
  TAccountFrom,
  TAccountTo,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    from: { value: input.from ?? null, isWritable: true },
    to: { value: input.to ?? null, isWritable: true },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.to),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getSplitInstructionDataEncoder().encode(
      args as SplitInstructionDataArgs
    ),
  } as SplitInstruction<
    TProgramAddress,
    TAccountFrom,
    TAccountTo,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedSplitInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The stake account to split. Must be in the Initialized or Stake state */
    from: TAccountMetas[0];
    /** The uninitialized stake account to split to. Must be rent-exempt starting from solana 1.17. */
    to: TAccountMetas[1];
    /** from's stake authority */
    stakeAuthority: TAccountMetas[2];
  };
  data: SplitInstructionData;
};

export function parseSplitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSplitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      from: getNextAccount(),
      to: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getSplitInstructionDataDecoder().decode(instruction.data),
  };
}
