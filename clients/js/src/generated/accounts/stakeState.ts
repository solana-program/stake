/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  getStakeStateV2Decoder,
  getStakeStateV2Encoder,
  type StakeStateV2,
  type StakeStateV2Args,
} from '../types';

export type StakeState = { state: StakeStateV2 };

export type StakeStateArgs = { state: StakeStateV2Args };

export function getStakeStateEncoder(): Encoder<StakeStateArgs> {
  return getStructEncoder([['state', getStakeStateV2Encoder()]]);
}

export function getStakeStateDecoder(): Decoder<StakeState> {
  return getStructDecoder([['state', getStakeStateV2Decoder()]]);
}

export function getStakeStateCodec(): Codec<StakeStateArgs, StakeState> {
  return combineCodec(getStakeStateEncoder(), getStakeStateDecoder());
}

export function decodeStakeState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakeState, TAddress>;
export function decodeStakeState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakeState, TAddress>;
export function decodeStakeState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StakeState, TAddress> | MaybeAccount<StakeState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakeStateDecoder()
  );
}

export async function fetchStakeState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakeState, TAddress>> {
  const maybeAccount = await fetchMaybeStakeState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakeState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakeState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakeState(maybeAccount);
}

export async function fetchAllStakeState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakeState>[]> {
  const maybeAccounts = await fetchAllMaybeStakeState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakeState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakeState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStakeState(maybeAccount));
}
